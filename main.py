import telebot
import os
import random
import string
from dotenv import load_dotenv
from telebot import types


load_dotenv()

lobby_data = {}
input_states = {}
top_states = {}
question_states = {}
user_lobby_data = {}
user_username = {}

with open('sponsors.txt', 'r') as file:
    sponsors = [line.strip() for line in file]

BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)


def get_user_name(user_id):
    if user_id.username:
        username = f"@{user_id.username}"
    else:
        username = f"{user_id.first_name}"
    return username


@bot.message_handler(['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.add(
        types.InlineKeyboardButton("üéÆ –°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏", callback_data='/create'),
        types.InlineKeyboardButton("‚ùì –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data='/info'),
        types.InlineKeyboardButton("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data='/join')
    )

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã '–¢–æ–ø—Ä–æ—Å—ã'! üé≤\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data in ['/create', '/info', '/join'])
def handle_callback(call):
    if call.data == '/create':
        create_lobby(call.message)
    elif call.data == '/join':
        join_lobby(call.message)
    elif call.data == '/info':
        info(call.message)

    bot.answer_callback_query(call.id)


@bot.message_handler(['info', 'help'])
def info(message):
    user_id = message.chat.id
    bot.send_message(user_id, """
    –ë–æ—Ç –¥–ª—è –∏–≥—Ä—ã ¬´–¢–æ–ø—Ä–æ—Å—ã¬ª
–í —á–µ–º —Å—É—Ç—å –∏–≥—Ä—ã? –ï—Å—Ç—å 2 –∏–≥—Ä–æ–∫–∞ –∏ 1 –≤–µ–¥—É—â–∏–π,
–∞ —Ç–∞–∫–∂–µ —Å–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö (5 —á–µ–ª–æ–≤–µ–∫) –∏ 1 —Å–ø–æ–Ω—Å–æ—Ä —à–æ—É(–∫–∞–∫–∞—è-—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å).
–í–µ–¥—É—â–∏–π –∑–∞–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ª–∏–±–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –ª–∏–±–æ —Ä–∞–∑–Ω—ã–µ, –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫,
—á—Ç–æ–±—ã –º–æ–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ª—é–¥–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ —Ç–æ–ø–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä, –∫—Ç–æ –∏–∑ —ç—Ç–∏—Ö –ª—é–¥–µ–π —Å–∞–º—ã–π –¥–æ–±—Ä—ã–π).
–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ç–æ–ø –ª—é–¥–µ–π –∏ –º–µ–Ω—è—é—Ç—Å—è –∏–º–∏, –∑–∞–¥–∞—á–∞ –∏–≥—Ä—ã –¥–æ–≥–∞–¥–∞—Ç—å—Å—è –±—ã–ª –ª–∏ —É 2 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–∞–∑–Ω—ã–µ, –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∏–≥—Ä—É —Å–ª–æ–∂–Ω–µ–µ –∑–∞–¥–∞–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ
–±–ª–∏–∑–∫–∏–µ, –Ω–æ —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–∞–∫ –∏ –ª–µ–≥—á–µ –∑–∞–¥–∞–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
–ù–µ–ø–æ–Ω—è—Ç–Ω–æ? –ü–æ —Ö–æ–¥—É –∏–≥—Ä—ã —Ä–∞–∑–±–µ—Ä–µ—Ç–µ—Å—å, —É–¥–∞—á–∏!!
    """)


@bot.message_handler(['create'])
def create_lobby(message):
    user_id = message.chat.id
    user_username[user_id] = get_user_name(message.chat)
    if user_id in user_lobby_data:
        bot.send_message(user_id, "–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏! –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ (/leave).")
        return

    lobby_id = ''.join(random.choices(string.ascii_uppercase, k=4))
    while lobby_id in lobby_data:
        lobby_id = ''.join(random.choices(string.ascii_uppercase, k=4))

    lobby_data[lobby_id] = {'creator': user_id,
                            'users': [user_id],
                            'active': False}
    user_lobby_data[user_id] = lobby_id

    bot.send_message(user_id, f'–û—Ç–ª–∏—á–Ω–æ, –ª–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ, –∫–æ–¥ –ª–æ–±–±–∏ {lobby_id}'
                              f' –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–º–æ–≥–ª–∏ –≤–æ–π—Ç–∏')


@bot.message_handler(['leave'])
def leave_lobby(message):
    user_id = message.chat.id
    if user_id not in user_lobby_data:
        bot.send_message(user_id, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏, –≤–æ–π–¥–∏—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É–µ—â–µ–µ –ª–æ–±–±–∏ (/join)"
                                  " –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ (/create).")
        return

    lobby_id = user_lobby_data[user_id]
    lobby = lobby_data[lobby_id]
    lobby['users'].remove(user_id)

    del user_lobby_data[user_id]

    if len(lobby['users']) == 0:
        del lobby_data[lobby_id]
        bot.send_message(user_id, f'–í—ã –≤—ã—à–ª–∏ –∏–∑ –ª–æ–±–±–∏ {lobby_id}, –ª–æ–±–±–∏ —É–¥–∞–ª–µ–Ω–æ')
    else:
        bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ª–æ–±–±–∏.")
        lobby["active"] = False

        for user in lobby_data[lobby_id]['users'][:]:
            bot.send_message(user, f'–£—á–∞—Å—Ç–Ω–∏–∫ {user_username[user]} –≤—ã—à–µ–ª, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            lobby['users'].remove(user)
            del user_lobby_data[user]


@bot.message_handler(['join'])
def join_lobby(message):
    user_id = message.chat.id
    user_username[user_id] = get_user_name(message.chat)

    if user_id in user_lobby_data:
        bot.send_message(user_id, "–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏! –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ (/leave)")
        return

    user_code = bot.send_message(user_id, "–í–≤–µ–¥–∏ –∫–æ–¥ –ª–æ–±–±–∏ (4 –±—É–∫–≤—ã)")
    bot.register_next_step_handler(user_code, check_lobby)


def check_lobby(message):
    user_id = message.chat.id

    try:
        if message.text.startswith('/'):
            return
        user_code = message.text.strip().upper()
    except AttributeError:
        msg = bot.send_message(user_id, "–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ")
        bot.register_next_step_handler(msg, check_lobby)
        return

    lobby = lobby_data.get(user_code)
    if not lobby:
        msg = bot.send_message(user_id, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥.")
        bot.register_next_step_handler(msg, check_lobby)
        return

    if len(lobby['users']) >= 3:
        msg = bot.send_message(user_id, "–õ–æ–±–±–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –ª–æ–±–±–∏")
        bot.register_next_step_handler(msg, check_lobby)
        return

    lobby['users'].append(user_id)
    user_lobby_data[user_id] = user_code
    bot.send_message(user_id, f'–í—ã –≤–æ—à–ª–∏ –≤ –ª–æ–±–±–∏ {user_code}! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {len(lobby['users'])}/3')
    for other_user in [user for user in lobby['users'] if user != user_id]:
        bot.send_message(other_user, f'{user_username[user_id]} –∑–∞—à–µ–ª –≤ –ª–æ–±–±–∏, {len(lobby['users'])}/3')
    if len(lobby['users']) == 3:
        lobby['active'] = True
        for user in lobby['users']:
            bot.send_message(user, '–õ–æ–±–±–∏ –Ω–∞–ø–æ–ª–Ω–∏–ª–æ—Å—å, –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è')
            bot.send_message(user, 'azber.ru - –ª—É—á—à–∏–π —Å–∞–π—Ç –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –°–∞—Ç—É—Ä–Ω\n'
                                   '@WordleCrackerBot - –¥–ª—è –∞–±—Å–æ–ª—é—Ç–æ–≤ Wordle')
        start_game(user_code)


def start_game(lobby_id):
    lobby = lobby_data[lobby_id]
    host = lobby['creator']
    players = [user for user in lobby['users'] if user != host]

    for user in lobby['users']:
        bot.send_message(user, f"–í–µ–¥—É—â–∏–π: {user_username[host]}")
        bot.send_message(user, f"–ò–≥—Ä–æ–∫–∏: {[user_username[player] for player in players]}")

    input_states[host] = {
        'lobby_id': lobby_id,
        'step': 0,
        'players': []
    }

    bot.send_message(host, "–í–≤–µ–¥–∏—Ç–µ 5 —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—é—Ç –∏–≥—Ä–æ–∫–∏(–û—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)")
    bot.send_message(host, "–í–≤–µ–¥–∏—Ç–µ 1 —á–µ–ª–æ–≤–µ–∫–∞:")


@bot.message_handler(func=lambda message: message.from_user.id in input_states and not message.text.startswith('/'))
def handle_host_players_inputs(message):
    user_id = message.chat.id
    state = input_states[user_id]
    try:
        user_input = message.text.strip()
    except AttributeError:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!")
        return

    if not user_input:
        bot.send_message(user_id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    state['players'].append(user_input)
    state['step'] += 1

    if state['step'] >= 5:
        markup = types.InlineKeyboardMarkup(row_width=2)
        yes_btn = types.InlineKeyboardButton('–î–∞, –≤–µ—Ä–Ω–æ', callback_data="players_correct")
        no_btn = types.InlineKeyboardButton('–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data="players_incorrect")
        markup.add(yes_btn, no_btn)

        bot.send_message(user_id, "\n".join([
            "–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:",
            *[f"{i + 1}. {name}" for i, name in enumerate(state['players'])]
        ]), reply_markup=markup)

    else:
        bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ {state['step'] + 1} –∏–º—è:")


@bot.callback_query_handler(func=lambda call: call.data in ['players_correct', 'players_incorrect'])
def confirm_players(call):
    user_id = call.message.chat.id
    state = input_states[user_id]
    lobby_id = state['lobby_id']

    bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=call.message.message_id,
        reply_markup=None
    )

    if call.data == 'players_correct':
        bot.answer_callback_query(call.id, "–û—Ç–ª–∏—á–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
        lobby_data[lobby_id]['selectable_players'] = state['players']
        del input_states[user_id]

        questions_creating(lobby_id)

    elif call.data == 'players_incorrect':
        bot.answer_callback_query(call.id, "–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–¥–µ–π –∑–∞–Ω–æ–≤–æ")
        input_states[user_id] = {
            'lobby_id': lobby_id,
            'step': 0,
            'players': []
        }
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ 1 —á–µ–ª–æ–≤–µ–∫–∞')
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")


def questions_creating(lobby_id):
    lobby = lobby_data[lobby_id]
    host = lobby['creator']
    players = [user for user in lobby['users'] if user != host]
    sponsor = random.choice(sponsors)

    for user in lobby['users']:
        bot.send_message(user, "\n".join([
            "–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:",
            *[f"{i + 1}. {name}" for i, name in enumerate(lobby['selectable_players'])]
        ]))
        bot.send_message(user, '–ê —Ç–∞–∫–∂–µ —Å–ø–æ–Ω—Å–æ—Ä —à–æ—É...')
        bot.send_message(user, sponsor)
    lobby['selectable_players'].append(sponsor)

    question_states[host] = {
        'lobby_id': lobby_id,
        'step': 0,
        'players': players
    }

    bot.send_message(host, f'–í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_username[players[0]]}')


@bot.message_handler(func=lambda message: message.from_user.id in question_states and not message.text.startswith('/'))
def handle_question_input(message):
    host = message.from_user.id
    state = question_states[host]
    lobby_id = state['lobby_id']
    players = state['players']
    step = state['step']

    if not message.text:
        bot.send_message(host, '–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç')

    if step == 0:
        lobby = lobby_data[lobby_id]
        state['step'] += 1
        lobby['questions'] = [message.text]
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        btn_same = types.KeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
        markup.add(btn_same)

        bot.send_message(
            host,
            f'–í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞ {user_username[players[1]]} –∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å',
            reply_markup=markup
        )

    elif step == 1:
        lobby = lobby_data[lobby_id]
        if message.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
            lobby['questions'].append(lobby['questions'][0])
        else:
            lobby['questions'].append(message.text)
        bot.send_message(host, "–í–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ò–≥—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∏ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–π —Ç–æ–ø", reply_markup=types.ReplyKeyboardRemove())

        for i, user in enumerate(players):
            top_states[user] = {
                'lobby_id': lobby_id,
                'step': 0,
                'top_people': []
            }
            bot.send_message(user, f'–ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π —Ç–æ–ø –Ω–∞ –≤–æ–ø—Ä–æ—Å: {lobby['questions'][i]}')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(
                types.KeyboardButton(lobby['selectable_players'][0]),
                types.KeyboardButton(lobby['selectable_players'][1]),
                types.KeyboardButton(lobby['selectable_players'][2])
            )
            markup.add(
                types.KeyboardButton(lobby['selectable_players'][3]),
                types.KeyboardButton(lobby['selectable_players'][4]),
                types.KeyboardButton(lobby['selectable_players'][5])
            )
            bot.send_message(user, '1 –º–µ—Å—Ç–æ', reply_markup=markup)
        del question_states[host]


@bot.message_handler(func=lambda message: message.from_user.id in top_states and not message.text.startswith('/'))
def handle_user_top(message):
    user_id = message.from_user.id
    state = top_states[user_id]
    lobby_id = state['lobby_id']
    lobby = lobby_data[lobby_id]
    selectable_players = lobby['selectable_players']

    if message.text not in selectable_players:
        bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω —á–µ–ª–æ–≤–µ–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
        active_players = [player for player in selectable_players if player not in top_states[user_id]['top_people']]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(active_players), 3):
            row_buttons = active_players[i:i + 3]
            markup.add(*[types.KeyboardButton(btn) for btn in row_buttons])
        bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏ {state['step'] + 1} –º–µ—Å—Ç–æ", reply_markup=markup)
        return

    top_states[user_id]['top_people'].append(message.text)

    if state['step'] >= 5:
        bot.send_message(user_id, f"–í—Å–µ –º–µ—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
        markup = types.InlineKeyboardMarkup(row_width=2)
        yes_btn = types.InlineKeyboardButton('–î–∞, –≤–µ—Ä–Ω–æ', callback_data="top_correct")
        no_btn = types.InlineKeyboardButton('–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data="top_incorrect")
        markup.add(yes_btn, no_btn)

        bot.send_message(user_id, "\n".join([
            "–¢–æ–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:",
            *[f"{i + 1}. {name}" for i, name in enumerate(top_states[user_id]['top_people'])]
        ]))
        bot.send_message(user_id, '–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=markup)
    else:
        top_states[user_id]['step'] += 1
        active_players = [player for player in selectable_players if player not in top_states[user_id]['top_people']]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(active_players), 3):
            row_buttons = active_players[i:i + 3]
            markup.add(*[types.KeyboardButton(btn) for btn in row_buttons])
        bot.send_message(user_id, f"{state['step']} –º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ {state['step'] + 1} –º–µ—Å—Ç–æ",
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ['top_correct', 'top_incorrect'])
def confirm_top(call):
    user_id = call.message.chat.id
    state = top_states[user_id]
    lobby_id = state['lobby_id']
    lobby = lobby_data[lobby_id]
    host = lobby['creator']
    players = [user for user in lobby['users'] if user != host]

    bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    if call.data == 'top_correct':
        if lobby.get('players_top') is None:
            lobby['players_top'] = []

        lobby['players_top'].append(top_states[user_id]['top_people'])
        del top_states[user_id]

        other_user_id = [user for user in players if user != user_id][0]

        if len(lobby['players_top']) == 2:
            for user in lobby['users']:
                bot.send_message(user, '–¢–æ–ø—ã —Å–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏—é')
            bot.send_message(host, f'{lobby['players_top']}')

            bot.send_message(host, lobby['questions'][players.index(user_id)])
            bot.send_message(host, "\n".join([f"{i+1}. {name}" for i, name in enumerate(lobby['players_top'][1])]))
            bot.send_message(host, lobby['questions'][players.index(other_user_id)])
            bot.send_message(host, "\n".join([f"{i+1}. {name}" for i, name in enumerate(lobby['players_top'][0])]))

            markup = types.InlineKeyboardMarkup(row_width=2)
            same_btn = types.InlineKeyboardButton('–£ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Ç–∞–∫–æ–π –∂–µ –≤–æ–ø—Ä–æ—Å', callback_data="same_question")
            other_btn = types.InlineKeyboardButton('–£ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥—Ä—É–≥–æ–π –∂–µ –≤–æ–ø—Ä–æ—Å', callback_data="other_question")
            markup.add(same_btn, other_btn)

            for user in players:
                bot.send_message(user, '–¢–æ–ø —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –ø–æ–ø—ã—Ç–∞–π—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã')

            bot.send_message(other_user_id, "\n".join([f"{i + 1}. {name}" for i, name in enumerate(lobby['players_top'][1])]), reply_markup=markup)
            bot.send_message(user_id, "\n".join([f"{i + 1}. {name}" for i, name in enumerate(lobby['players_top'][0])]), reply_markup=markup)

        else:
            bot.send_message(user_id, '–û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞')
            bot.send_message(host, f'{user_username[user_id]} –æ—Ç–≤–µ—Ç–∏–ª')

    elif call.data == 'top_incorrect':
        top_states[user_id]['step'] = 0
        top_states[user_id]['top_people'] = []

        bot.send_message(user_id, f'–ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π —Ç–æ–ø –Ω–∞ –≤–æ–ø—Ä–æ—Å: {lobby["questions"][players.index(user_id)]}')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton(lobby['selectable_players'][0]),
            types.KeyboardButton(lobby['selectable_players'][1]),
            types.KeyboardButton(lobby['selectable_players'][2])
        )
        markup.add(
            types.KeyboardButton(lobby['selectable_players'][3]),
            types.KeyboardButton(lobby['selectable_players'][4]),
            types.KeyboardButton(lobby['selectable_players'][5])
        )
        bot.send_message(user_id, '1 –º–µ—Å—Ç–æ', reply_markup=markup)
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")


@bot.callback_query_handler(func=lambda call: call.data in ['same_question', 'other_question'])
def reveal_answers(call):
    user_id = call.message.chat.id
    lobby_id = user_lobby_data[user_id]
    lobby = lobby_data[lobby_id]
    host = lobby['creator']
    first_question = lobby['questions'][0]
    second_question = lobby['questions'][1]

    bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=call.message.message_id,
        reply_markup=None
    )

    if call.data == 'same_question' and first_question == second_question:
        bot.send_message(host, f'{user_username[user_id]} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        bot.send_message(user_id, f'—Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ')

    elif call.data == 'other_question' and first_question == second_question:
        bot.send_message(host, f'{user_username[user_id]} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        bot.send_message(user_id, f'—Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')

    elif call.data == 'same_question' and first_question != second_question:
        bot.send_message(host, f'{user_username[user_id]} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        bot.send_message(user_id, f'—Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')

    elif call.data == 'other_question' and first_question != second_question:
        bot.send_message(host, f'{user_username[user_id]} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        bot.send_message(user_id, f'—Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ')

    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")

    lobby['answers_received'] = lobby.get('answers_received', 0) + 1

    if lobby['answers_received'] == 2:
        markup = types.InlineKeyboardMarkup(row_width=1)
        replay_btn = types.InlineKeyboardButton('–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data="replay")
        markup.add(replay_btn)
        bot.send_message(host, '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'replay')
def replay(call):
    user_id = call.message.chat.id
    lobby_id = user_lobby_data[user_id]
    lobby = lobby_data.get(lobby_id)
    lobby = {
        'creator': lobby['creator'],
        'users': lobby['users'],
        'active': True,
        'selectable_players': lobby['selectable_players'][:-1]
    }
    lobby_data[lobby_id] = lobby

    for state_dict in [input_states, top_states, question_states]:
        for uid in list(state_dict.keys()):
            del state_dict[uid]

    for user in lobby['users']:
        bot.send_message(user, "–ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥")
    questions_creating(lobby_id)


if __name__ == '__main__':
    bot.infinity_polling()
